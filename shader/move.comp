#version 460 core

layout(local_size_x = 1) in;

struct Particle {
	vec2 pos;
	vec2 prevPos;
};

layout(std430, binding = 0) buffer Particles {
	Particle particles[];
};

// float radius = 0.01;

// void collide(uint i1, uint i2) {
// 	Particle p1 = particles[i1];
// 	Particle p2 = particles[i2];
// 	vec2 pos1 = p1.pos;
// 	vec2 pos2 = p2.pos;
// 	vec2 delta = pos1 - pos2;
// 	float dist2 = dot(delta, delta);
// 	float rsum = 2.0 * radius;
// 	float rsum2 = rsum * rsum;
// 	if (dist2 >= rsum2) { return; }
// 	float dist = sqrt(dist2);
// 	float epsilon = 0.0000001;
// 	vec2 normal;
// 	if (dist < epsilon) {
// 		normal = vec2(0.0, 1.0);
// 	} else {
// 		normal = delta * (1.0 / dist);
// 	}
// 	float overlap = rsum - dist;
// 	float scalar = 1.05;
// 	particles[i1].pos += scalar * 0.5 * overlap * normal;
// 	particles[i2].pos -= scalar * 0.5 * overlap * normal;
// }

void main(void) {

	uint i = gl_GlobalInvocationID.x;
	Particle p = particles[i];

	float dt = 0.001;

	vec2 acc = vec2(0.0, -1.0);

	vec2 vel = p.pos - p.prevPos;
	p.prevPos = p.pos;
	p.pos += vel + acc * dt * dt;

	// for (uint j = 0; j < particles.length(); j++) {
	// 	collide(i, j);
	// }

	// float dist = length(p.pos);
	// vec2 n = p.pos * (1.0 / dist);
	// dist = min(dist, 0.9);
	// p.pos = n * dist;

	// p.pos = vec2(0.0, 0.0);

	particles[i] = p;
}
