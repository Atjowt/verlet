#version 460 core

layout(local_size_x = 1) in;

struct Particle {
	vec2 pos;
	vec2 prevPos;
};

layout(std430, binding = 0) buffer Particles {
	Particle particles[];
};

layout(std430, binding = 1) buffer Adjustment {
	vec2 adjustments[];
};

float radius = 0.01;
float rsum = 2.0 * radius;
float rsum2 = rsum * rsum;
float epsilon = 0.00001;
float overshoot = 0.001;

void main(void) {
	uint i = gl_GlobalInvocationID.x;
	adjustments[i] = vec2(0.0);
	Particle p1 = particles[i];
	vec2 pos1 = p1.pos;
	for (uint j = 0; j < particles.length(); j++) {
		Particle p2 = particles[j];
		vec2 pos2 = p2.pos;
		vec2 delta = pos1 - pos2;
		float dist2 = dot(delta, delta);
		if (dist2 >= rsum2) { continue; }
		float dist = sqrt(dist2);
		vec2 normal;
		if (dist < epsilon) {
			normal = vec2(0.0, 1.0);
		} else {
			normal = delta * (1.0 / dist);
		}
		float overlap = rsum - dist;
		vec2 response = overshoot * 0.5 * overlap * normal;
		// adjustment += response;
		adjustments[i] += response;
		adjustments[j] -= response;
		// atomicAdd(particles[i].pos.x, +response.x);
		// atomicAdd(particles[i].pos.y, +response.y);
		// atomicAdd(particles[j].pos.x, -response.x);
		// atomicAdd(particles[j].pos.y, -response.y);
	}
}
